{"version":3,"sources":["Body/index.js","Body/Body.js","App/App.js","serviceWorker.js","index.js"],"names":["Body","withRouter","location","useState","scroll","setScroll","loaded","setLoaded","fadeArrow","setFadeArrow","handleScroll","window","scrollY","useEffect","addEventListener","windowHeight","innerHeight","colorMap","style","backgroundColor","Math","floor","className","opacity","height","pointerEvents","classnames","right","left","outerWidth","src","color","App","BrowserRouter","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qRACeA,G,MC8HAC,aAzHG,SAAC,GAAiB,EAAfC,SAAgB,IAAD,EACNC,mBAAS,GADH,mBAC3BC,EAD2B,KACnBC,EADmB,OAENF,oBAAS,GAFH,mBAE3BG,EAF2B,KAEnBC,EAFmB,OAGAJ,oBAAS,GAHT,mBAG3BK,EAH2B,KAGhBC,EAHgB,KAK5BC,EAAe,WACnBL,EAAUM,OAAOC,SACjBH,GAAa,IAGfI,qBAAU,WACRJ,GAAa,GACbF,GAAU,GACVI,OAAOG,iBAAiB,SAAUJ,GAAc,KAC/C,IAEH,IAAMK,EAAe,EAAIJ,OAAOK,YAE1BC,EAAW,CACf,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WAOF,OACE,0BAAMC,MAAO,CAAEC,gBAJRF,EAASG,KAAKC,MAAMjB,EAASO,OAAOK,gBAKzC,yBACEM,UAAU,OACVJ,MAAO,CACLK,QACEnB,EAASW,EAAe,GAAKX,EAASW,GAAgB,IAAO,EAC/DS,OAAQT,EAAe,IACvBU,cAAerB,EAASO,OAAOK,YAAc,OAAS,SAGxD,yBAAKM,UAAWI,IAAW,QAAS,cAClC,yBAAKJ,UAAU,WACb,yBACEA,UAAU,eACVJ,MAAO,CAAES,MAAOvB,EAAS,EAAGmB,QAASjB,EAAS,EAAI,IAElD,4CAEF,yBACEgB,UAAU,cACVJ,MAAO,CAAEU,KAAMxB,EAAS,EAAGmB,QAASjB,EAAS,EAAI,IAEjD,4BAAKK,OAAOkB,WAAa,IAAM,cAAgB,GAA/C,gBAIN,yBAAKP,UAAU,UAAUJ,MAAO,CAAEK,QAASf,EAAY,EAAI,IAA3D,WAIF,yBAAKc,UAAU,WACb,yBAAKA,UAAU,mBACb,sCACA,6FAIA,mGAIF,yBAAKQ,IAAI,iBAEX,yBAAKR,UAAU,UAAUJ,MAAO,CAAEa,MAAO,YACvC,yBAAKT,UAAU,mBACb,yCACA,oFACA,oGAIF,yBAAKQ,IAAI,iBAEX,yBAAKR,UAAU,UAAUJ,MAAO,CAAEa,MAAO,YACvC,yBAAKT,UAAU,mBACb,0CACA,4CACA,mGAIF,yBAAKQ,IAAI,uBAEX,yBAAKR,UAAU,UAAUJ,MAAO,CAAEa,MAAO,YACvC,yBAAKT,UAAU,mBACb,4BAAKX,OAAOkB,WAAa,IAAM,UAAY,GAA3C,kBACA,4CACA,oGAIF,yBAAKC,IAAI,kBAEX,yBAAKR,UAAU,WACb,yBAAKA,UAAU,mBACb,uCACA,yCACA,gGAIF,yBAAKQ,IAAI,mB,kBCtGFE,MAXf,WACE,OACE,kBAACC,EAAA,EAAD,KACE,oCAEE,kBAAC,EAAD,SCDYC,QACW,cAA7BvB,OAAOT,SAASiC,UAEe,UAA7BxB,OAAOT,SAASiC,UAEhBxB,OAAOT,SAASiC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.10423ecf.chunk.js","sourcesContent":["import Body from \"./Body\";\nexport default Body;\n","import React, { useEffect, useState } from 'react';\nimport classnames from 'classnames/bind';\nimport { withRouter } from 'react-router-dom';\n\nimport './Body.scss';\n\nconst Container = ({ location }) => {\n  const [scroll, setScroll] = useState(0);\n  const [loaded, setLoaded] = useState(false);\n  const [fadeArrow, setFadeArrow] = useState(true);\n\n  const handleScroll = () => {\n    setScroll(window.scrollY);\n    setFadeArrow(true);\n  };\n\n  useEffect(() => {\n    setFadeArrow(false);\n    setLoaded(true);\n    window.addEventListener('scroll', handleScroll, true);\n  }, []);\n\n  const windowHeight = 2 * window.innerHeight;\n\n  const colorMap = [\n    '#191819',\n    '#191819',\n    '#191819',\n    '#6a1b9a',\n    '#fcf3d1',\n    '#dcedc8',\n    '#e5e5e5',\n    '#7f0000',\n  ];\n\n  const backgroundColor = () => {\n    return colorMap[Math.floor(scroll / window.innerHeight)];\n  };\n\n  return (\n    <main style={{ backgroundColor: backgroundColor() }}>\n      <div\n        className=\"body\"\n        style={{\n          opacity:\n            scroll > windowHeight ? 1 - (scroll - windowHeight) / 1000 : 1,\n          height: windowHeight + 1000,\n          pointerEvents: scroll > window.innerHeight ? 'none' : 'auto',\n        }}\n      >\n        <div className={classnames('title', 'container')}>\n          <div className=\"landing\">\n            <div\n              className=\"header right\"\n              style={{ right: scroll / 2, opacity: loaded ? 1 : 0 }}\n            >\n              <h1>thao nguyen</h1>\n            </div>\n            <div\n              className=\"header left\"\n              style={{ left: scroll / 2, opacity: loaded ? 1 : 0 }}\n            >\n              <h1>{window.outerWidth > 600 ? 'visual + ux' : ''} designer</h1>\n            </div>\n          </div>\n        </div>\n        <div className=\"chevron\" style={{ opacity: fadeArrow ? 0 : 1 }}>\n          &rsaquo;\n        </div>\n      </div>\n      <div className=\"project\">\n        <div className=\"project-content\">\n          <h1>Recall</h1>\n          <h6>\n            UX design &middot; UX research &middot; Illustration &middot;\n            Development\n          </h6>\n          <h4>\n            A video platform for automated analysis of UX research interviews.\n          </h4>\n        </div>\n        <img src=\"/recall.png\" />\n      </div>\n      <div className=\"project\" style={{ color: '#191819' }}>\n        <div className=\"project-content\">\n          <h1>Fabric UX</h1>\n          <h6>Brand identity &middot; Visual design &middot; Motion design</h6>\n          <h4>\n            Complete brand identity and visual system for an internal ads team.\n          </h4>\n        </div>\n        <img src=\"/fabric.png\" />\n      </div>\n      <div className=\"project\" style={{ color: '#191819' }}>\n        <div className=\"project-content\">\n          <h1>Google Ads</h1>\n          <h6>Illustration</h6>\n          <h4>\n            Set of hero and empty state illustrations for Ads Creative Studio.\n          </h4>\n        </div>\n        <img src=\"/illustration.png\" />\n      </div>\n      <div className=\"project\" style={{ color: '#191819' }}>\n        <div className=\"project-content\">\n          <h1>{window.outerWidth > 600 ? 'Product' : ''} Illustrations</h1>\n          <h6>Illustration</h6>\n          <h4>\n            Assorted illustrations and animations for internal Google products.\n          </h4>\n        </div>\n        <img src=\"/product.png\" />\n      </div>\n      <div className=\"project\">\n        <div className=\"project-content\">\n          <h1>NYC DSA</h1>\n          <h6>UX design</h6>\n          <h4>\n            Marketing website for the NYC Democratic Socialists of America.\n          </h4>\n        </div>\n        <img src=\"/dsa.png\" />\n      </div>\n    </main>\n  );\n};\n\nexport default withRouter(Container);\n","import React from \"react\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nimport Body from \"../Body\";\nimport Header from \"../Header\";\n\nimport \"./App.scss\";\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <>\n        {/* <Header /> */}\n        <Body />\n      </>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}